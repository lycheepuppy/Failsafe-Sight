version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: ./backend
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:5173}
      - LOG_LEVEL=info
      - ENABLE_HEALTH_CHECK=true
      - ENABLE_METRICS=true
      - ENABLE_PERFORMANCE_MONITORING=true
      - CACHE_ENABLED=true
      - RATE_LIMIT_MAX=100
      - REQUEST_TIMEOUT=30000
    volumes:
      - ./backend/logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "src/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - failsafe-network

  # Frontend (development)
  frontend-dev:
    build:
      context: ./frontend
      target: development
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:3000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - failsafe-network
    profiles:
      - development

  # Frontend (production)
  frontend-prod:
    build:
      context: ./frontend
      target: production
    ports:
      - "80:80"
    environment:
      - VITE_API_URL=http://localhost:3000
    depends_on:
      - backend
    networks:
      - failsafe-network
    profiles:
      - production

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend-prod
    networks:
      - failsafe-network
    profiles:
      - production

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - failsafe-network
    profiles:
      - production

  # Monitoring stack (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - failsafe-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - failsafe-network
    profiles:
      - monitoring

volumes:
  redis-data:
  grafana-data:

networks:
  failsafe-network:
    driver: bridge 